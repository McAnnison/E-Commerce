// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer relationships
  orders    Order[]
  cart      CartItem[]
  reviews   Review[]
  addresses Address[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String?
  price         Float
  unit          String    // kg, piece, bunch, etc.
  imageUrl      String?
  stockQuantity Int       @default(0)
  isAvailable   Boolean   @default(true)
  categoryId    String
  supplierId    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  category    Category     @relation(fields: [categoryId], references: [id])
  supplier    Supplier?    @relation(fields: [supplierId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  inventory   Inventory[]

  @@map("products")
}

model Supplier {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  phone       String
  address     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("suppliers")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int    @default(1)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  deliveryAddress String
  deliveryDate    DateTime?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  delivery   Delivery?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Delivery {
  id             String         @id @default(cuid())
  orderId        String         @unique
  driverId       String?
  status         DeliveryStatus @default(PENDING)
  estimatedTime  DateTime?
  actualTime     DateTime?
  trackingNumber String         @unique @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver User?  @relation("DriverDeliveries", fields: [driverId], references: [id])

  @@map("deliveries")
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String  @default("Ghana")
  isDefault Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Inventory {
  id              String   @id @default(cuid())
  productId       String
  quantity        Int
  expirationDate  DateTime?
  batchNumber     String?
  costPrice       Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

enum UserRole {
  CUSTOMER
  ADMIN
  DRIVER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  FAILED
}